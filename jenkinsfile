pipeline {
    agent any
    environment {
        SONARQUBE_URL = 'http://localhost:9000' 
    }
    stages {
        stage("Clean up") {
            steps {
                sh 'sudo rm -rf /home/omaima/.jenkins/workspace/mytest/r'
                sh 'sudo rm -rf /home/omaima/.jenkins/workspace/mytest/astonvilla-app/*'
                sh 'ls'
            }
        }
        stage("Clone repo") {
            steps {
                sh "git clone https://github.com/oumaimakhlifi/r.git"
            }
        }
        stage("Generate docker image") {
            steps {
                dir("r") { // Répertoire du dépôt cloné
                    sh "ls" // Liste le contenu pour vérifier la présence du Dockerfile
                    sh "docker build -t oumaimakhelifi/astonvilla-app:1.1.${env.BUILD_NUMBER} ."
                }
            }
        }
        stage("Push docker image") {
            steps {
                dir("r") { // Répertoire du dépôt cloné
                    sh "docker push oumaimakhelifi/astonvilla-app:1.1.${env.BUILD_NUMBER}"
                }
            }
        }
        stage("SonarQube Analysis") {
            steps {
                script {
                    def scannerHome = tool 'SonarQube Scanner' 
                    withSonarQubeEnv('sonar') { 
                        dir('r') { // Répertoire du dépôt cloné
                            sh "${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=astonvilla-app \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${env.SONARQUBE_URL} \
                                -Dsonar.login=squ_c51492f4594f426ab2552c7f8168472c26f3e7fb" 
                        }
                    }
                }
            }
        }
        stage("Clone gitops repo") {
            steps {
                sh "git clone https://github.com/oumaimakhlifi/argocd.git"
            }
        }
        stage("Change image tag") {
            steps {
                dir('argocd/astonvilla-app') {
                    script {
                        def deployment = readFile('astonvilla-deployment.yaml')
                        def updatedDeployment = deployment.replaceAll(/astonvilla-app:\s*[\w.-]+/, "astonvilla-app:1.1.${env.BUILD_NUMBER}")
                        writeFile file: 'astonvilla-deployment.yaml', text: updatedDeployment
                    }
                }
            }
        }
        stage("Commit changes") {
            steps {
                dir('argocd/astonvilla-app') {
                    script {
                        sh 'git config user.email "jenkins@agent.com"'
                        sh 'git config user.name "jenkins-admin"'
                        sh 'git add astonvilla-deployment.yaml'
                        sh 'git commit -m "updated image tag"'
                        sh 'git push https://oumaimakhlifi:${GITHUB_TOKEN}@github.com/oumaimakhlifi/argocd.git master'
                    }
                }
            }
        }
    }
}
